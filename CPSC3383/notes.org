#+TITLE: Operating Systems Notes
#+AUTHOR: Denver Ellis


* 20200121
** Welcome!
** Introduction
- OS: A core course in any CPSC curriculum
- Other core courses are...
  - Programming
  - Data Structure
  - Assembly
  - Computer Organization
  - Software Engineering
** What an OS Does
- A computer system consists of _4 components_:
  - Hardware
  - OS
  - Application Programs
  - Users
- OS contacts the Hardware
- OS is a _resource allocator_ for CPU, memory, file storage, etc.
- OS is a _control program_ running at all times.
** Computer System Organization
- CPU, memory, disk, I/O devices (monitor, printer, keyboard, etc)
- Storage hierarchy: from register to tapes
- Cost and access speed
* 20200123
- Operating System is just a piece of software, not hardware. A software package.
- "Paging Fault"
** Cache
- Note that "cache" has two meanings: as a principle or as a dedicated piece of hardware
- Instruction cache; data cache
- Data transfer from cache to CPU and registers is usually a hardware function
- Multiprocessor: cache coherency
- Not in OS Context
- Replacement policy in Ch.10
** Cachng
- Important principle, perormed at many levels in computer (in hardware, operating system, software)
- Information in use copied from slower to faster storage temporarily
- Faster storage (cache) checked first to determine if nformation is there
  - If it is, information used directly from the cache (fast)
  - If not, data copied to cache and used there
** OS Functionalities and Structure
- *Multi-programming*: Several jobs are kept in main memory at the same time, and the CPU is _multiplexed_ among them.
- Time Division Multiplexer
- When Job 1 needs I/O, it quits CPU. Job 2 gets in. After Job 1 finishes I/O, it gets in again
- An _Extension_: Job 1 quits CPU even if it does not need I/O so Job 2 can use CPU sooner. This is called *time-sharing*
- CPU Scheduler
- Memory Manager
- Disk Manager
- Multi-Processing systems did not prvide for user interaction
- *Time-Sharing* (aka /multi-tasking/) allows the use to use keyboard or mouse to interact with each program
- A program loaded into memory and executing is called a *Process*
- When a process is waiting for typing from the keyboard, the CPU switches run another program
** I/O Structure
- A modern general-purpose computer supports diverse external devices (multimedia, etc.)
- Each device has a *Device Controller* (DC)
- Typically, a DC has a local buffer and a set of registers
- Sometimes a DC can support multiple devices, like the /small computer-system interface/ (SCSI) controller
- To start an I/O operation, the /device driver/ (DD) loads ...
** The Timer Interrupts
* 20200128
** Dual-Mode Opration and System Calls
- In a modern OS, there are multiple programs to be executed in an interleaving mode
- Protection is needed between them, especiallt for OS
- Kernel mode (a.k.a privileged, system, supervisor mode)
  - Changing the timer is a privileged instruction
  - Default timer for a program to run is 5 seconds
- User mode
- System Call: When the user code needs a service from OS, it must execute a _special instruction_ (/trap/), to inform OS
- The OS sets up the kernel mode, then runs the required service, then resets the user mode, then returns to the user code
** Computing Evironments - Virtualization
- Allows an OS to run applications in another OS
  - Vast and growing industry
- *Emulation* used when source CPU type different from target type (i.e. PowerPC to Intel x86)
  - Generally _slowest_ method
  - When computer language nnot compiled to native cove- *Interpretation*
** OS Services
- Program Execution: System capability to _load_ a program into memory and to _run_ it
- I/O operations: the user programs cannot execute I/O operations directly. OS must provide some means to perform I/O
- File-system Manipulations: program capability to read, write, create, and delete files
- *Communications*: exchange of information between _processes_ executing either on the same computer or on different systems tied together by a network. Implemented via shared /memory/ or /message passing/
- Error Detection: ensure correct computiing by detecting rrors in the CPU and memory hardware, in I/O devices, or in user programs
** User-OS Interface
*** Command-Interpreter System
- Many commands are given to the operating system by control sttements which deal with:
  - Process creation and management
  - I/O handling
  - secondary-storage management
  - main-memory management
  - file-system access
  - protection
  - networking
*** Shell
- In Unix and Linux, the _shell_ is a program to read and interpret the control statements
- The shell is both an _interactive command language_ and a _scripting language_
- With shell scripts, user can control various actions
- There are two major types of shells
  - Bourne Shell
    - Bourne shell (sh)
    - Bourne-Again shell (bash) (Ubuntu)
    - Korn shell (ksh)
  - C Shell (csh) (BSD Unix)
**** Basic Commands
- Some basic commands
  - man
  - ls
  - cat
  - rm
  - mv
  - cp
  - mkdir
  - rmdir
  - cd
  - more
  - whereis
  - who
  - which
  - date
  - etc...
- System administration command
  - su
  - sudo
  - df
  - mount
  - df -t ext4
  - du
  - du -b
  - stat ch2
  - ulimit -c
  - free
  - vmstat
  - ulimit -a (for bash or pdksh)
  - ps -m
  - kill -l
  - top
  - uptime
  - w
  - pppstats (not installed) (ppp)
  - mailstat (not installed) (procmail)
*** Graphical User Interfaces (GUI)
- Windows: 95, 98, NT4, ME, 2000, Vista, XP, 7, 8, 8.1, 10
- Linux: KDE, Gnome, Mate, Cinnamon, Budgie, LXDE, Xfce,...
* 20200130
** Systems Calls (Sec 2.3)
- System calls provide the interface between an application process and the OS
  - In essence, available as assembly-language instruction
  - Some languages (e.g. C, C++) replace the assembly language part and allow to make system calls directly

** Example: Copy file to another file
- Acquire the name of the source file
- Acquire the name of the target file
- Open the source file (exist or not?)
- Create the target file (exist or not?)
- Loop line by line
- Close both files
- Send a message to the screen

** Types of System Calls
- Correspond to the main components of OS: the scheduler, file system, I/O system, and memory management
  - Process control
    - End, abort
    - Create, terminate
    - Set or get parameters
    - Suspend, resume
    - Allocate and release memore
  - File management
  - Device management
  - Information maintenance
  - Communications

** OS Structures (Sec 2.8)
- Simple Structure
  - MS-DOS

*** Layered Approach
- The OS is divided into layers ...

**** Disadvantages
- Too much overhead caused by multiple interfaces
- Similar problem in large companies in industry
- Flat tree: one president with many vice presidents (VPs)
- Effectiveness with soft-ware engineering

*** Micro-Kernels
- UNIX became very large and difficult to manage
- In the mid-1980s, the _Mach_(Ma:k) project adopted the MK approach
- Removed all nonessential components from the kernel
- Implement them as system level and user level programs

**** The MK Contains
- Process management
- Memory management
- Communication facilities between the clients and services, both in use space
  - Method: Message passing (or shared memory... chapter 3)
- Example: if a client program wants to access a file, it indirectl interacts with the ile server, through the MK

**** Advantages of MK
- Easy to extend the OS
  - All new services are added to user space
  - No need to modify the kernel
- Easy to port to new hardware architectures
- More security and reliability
  - New services are not put into the kernel

**** MK in Modern Operating Systems
- Tru64 UNIX (formerly Digital UNIX): Mach kernel with Unix interface
- QNX real-time OS
  - The MK provides process scheduling, message passing, hardware interrupts, low-level net communication
  - All other services are implemented with user processes
- Mac OS X: Mach kernel; BSD kernel; application can directly talk to kernels
- Windows NT first used in MK; then (NT4) moved many programs frm user space to kernel space
- Windows 2000 (NT5)  is based on MK
  - Professional; Server; Advanced Server; Data-center Server (32 CPUs and 64 GB RAM)
- Windows XP: More monolithic
- Linux
- Trend of OS structures

**** Modules
- Like a star network wwith a /core kernel/
- Any module can call any other module
- Dynamically loadable in boot time or running time
- A homework for _Linux modules_ will be given later
* 20200204
** Process Concept
- A /process/ is _a computer program in execution_
  - /"Execution"/ does *not* necessarily mean /"running"/
- A basic feature: the execution must progress in a _sequential_ fashion

** Process States
- As a process /executes/, there are several /states/:
  - *New*: The process is being created
  - *Ready*: The process is waiting for the CPU
  - *Running*: Instructions are being executed
  - *Waiting*: The process is waiting for something to occur
  - *Terminated*: The process has finished execution

** Memory ...
- Memory occupation of a process
  - _Program Counter_: The next instruction to be executed
  - _Stack_: Temporary data, e.g., function parameters, local variables inside functions
  - _Data Section_: Global variables
  - _Text Section_: Instructions, i.e. program code
  - _Heap_: Dynamic memory

** Process Control Block (PCB)
- This is a data structure
- It contains all attributes of a process
- Examples:
  - Process state
  - Program counter
  - CPU registers
  - CPU scheduling information
  - Memory-management information
  - I/O status information

*** Linux Side:
In Linux the PCB is: ~struct task_struct~ (about 1k bytes)
- Hard Coded Part
#+BEGIN_SRC c
21931 struct task_struct {

21934 volatile long state;
/* -1 unrunnable, 0 runnable, >0 stopped */
#+END_SRC
- ~volatile~: (ANSI keyword): it tells the compiler that a variable my have its value altered in ways not explicitly defined in the program. E.g., the data can be altered by interrupts or H/W clocks
- Use ~man gcc~ to see the details
- Running: The current state of the process
- ~TASK_RUNNING~: It is running or ready to run
- ~TASK_INTERRUPTIBLE~ or ~TASK_UNINTERRUPTIBLE~: Waiting for some events. The latter does not accept any signals
- ~TASK_STOPPED~: Stopped by some singals, or being traced by a tool
- ~TASK_ZOMBIE~: Terminated but still registered in the /process control table (PCB)
* 20200206
** Operations on Processes
- Parent process _creates_ child processes, which, in turn create other processes, forming a tree of processes
- Three modes of resource sharing
  - Parent and children share _all_ resources.
  - Children share _subset_ of parent's resources
  - Parent and child share _no_ resources
- Two modes of execution:
  - Parent and children execute _concurrently_
  - Parent _waits_ until children terminates

** Example: Create a New Process in Unix/Linux
- Every process must have a parent
- Traditionally, when creating a new process, Unix _copies_ all stuff of the parent process
- The user can use _system call_ *fork* to create a new process
- see an example

#+BEGIN_SRC c++
#include <stdio.h>
#include <stdlib.h>

int main() {
  int childpid;

  if((childpid=fork()) == -1) {
    perror("can't Fork");
    exit(1);
  }
  else if(childpid == 0) {
    printf("I am child: child pid = %d,
            parent pid = %d \n",
            getpid(), getppid());
    system("ps f");
  }
  else {
    printf("I am parent: child pid = %d,
            parent pid = %d\n",
            childpid, getpid());
  }
  sleep(1); exit(0);
}
#+END_SRC
* 20200211
** Process Termination
- A process executes its last statement and asks OS to decide it (*exit*)
  - Output data from child to parent (via *wait*)
  - Process' resources are de-allocated by OS

- A parent may terminate its children processes (*abort*), because
  - Child has exceeded allocated resources
  - Task assigned to child is no longer required
  - The parent itself is exiting
    - OS does *not* allow child to continue if its parent terminates

** Inter-procss Communication (IPC)
- Two methods: /Shared Memory/ (SM) and /Message Passing/ (MP)
  - Both methods use an /intermediary buffer/ for the shared data
  - The difference is due to _the buffer's location_: in _kernel's space_ or _user's space_
  - The SM is usually in the creator's space
