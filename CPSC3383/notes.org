#+TITLE: Operating Systems Notes
#+AUTHOR: Denver Ellis


* 20200121
** Welcome!
** Introduction
- OS: A core course in any CPSC curriculum
- Other core courses are...
  - Programming
  - Data Structure
  - Assembly
  - Computer Organization
  - Software Engineering
** What an OS Does
- A computer system consists of _4 components_:
  - Hardware
  - OS
  - Application Programs
  - Users
- OS contacts the Hardware
- OS is a _resource allocator_ for CPU, memory, file storage, etc.
- OS is a _control program_ running at all times.
** Computer System Organization
- CPU, memory, disk, I/O devices (monitor, printer, keyboard, etc)
- Storage hierarchy: from register to tapes
- Cost and access speed
* 20200123
- Operating System is just a piece of software, not hardware. A software package.
- "Paging Fault"
** Cache
- Note that "cache" has two meanings: as a principle or as a dedicated piece of hardware
- Instruction cache; data cache
- Data transfer from cache to CPU and registers is usually a hardware function
- Multiprocessor: cache coherency
- Not in OS Context
- Replacement policy in Ch.10
** Cachng
- Important principle, perormed at many levels in computer (in hardware, operating system, software)
- Information in use copied from slower to faster storage temporarily
- Faster storage (cache) checked first to determine if nformation is there
  - If it is, information used directly from the cache (fast)
  - If not, data copied to cache and used there
** OS Functionalities and Structure
- *Multi-programming*: Several jobs are kept in main memory at the same time, and the CPU is _multiplexed_ among them.
- Time Division Multiplexer
- When Job 1 needs I/O, it quits CPU. Job 2 gets in. After Job 1 finishes I/O, it gets in again
- An _Extension_: Job 1 quits CPU even if it does not need I/O so Job 2 can use CPU sooner. This is called *time-sharing*
- CPU Scheduler
- Memory Manager
- Disk Manager
- Multi-Processing systems did not prvide for user interaction
- *Time-Sharing* (aka /multi-tasking/) allows the use to use keyboard or mouse to interact with each program
- A program loaded into memory and executing is called a *Process*
- When a process is waiting for typing from the keyboard, the CPU switches run another program
** I/O Structure
- A modern general-purpose computer supports diverse external devices (multimedia, etc.)
- Each device has a *Device Controller* (DC)
- Typically, a DC has a local buffer and a set of registers
- Sometimes a DC can support multiple devices, like the /small computer-system interface/ (SCSI) controller
- To start an I/O operation, the /device driver/ (DD) loads ...
** The Timer Interrupts
* 20200128
** Dual-Mode Opration and System Calls
- In a modern OS, there are multiple programs to be executed in an interleaving mode
- Protection is needed between them, especiallt for OS
- Kernel mode (a.k.a privileged, system, supervisor mode)
  - Changing the timer is a privileged instruction
  - Default timer for a program to run is 5 seconds
- User mode
- System Call: When the user code needs a service from OS, it must execute a _special instruction_ (/trap/), to inform OS
- The OS sets up the kernel mode, then runs the required service, then resets the user mode, then returns to the user code
** Computing Evironments - Virtualization
- Allows an OS to run applications in another OS
  - Vast and growing industry
- *Emulation* used when source CPU type different from target type (i.e. PowerPC to Intel x86)
  - Generally _slowest_ method
  - When computer language nnot compiled to native cove- *Interpretation*
** OS Services
- Program Execution: System capability to _load_ a program into memory and to _run_ it
- I/O operations: the user programs cannot execute I/O operations directly. OS must provide some means to perform I/O
- File-system Manipulations: program capability to read, write, create, and delete files
- *Communications*: exchange of information between _processes_ executing either on the same computer or on different systems tied together by a network. Implemented via shared /memory/ or /message passing/
- Error Detection: ensure correct computiing by detecting rrors in the CPU and memory hardware, in I/O devices, or in user programs
** User-OS Interface
*** Command-Interpreter System
- Many commands are given to the operating system by control sttements which deal with:
  - Process creation and management
  - I/O handling
  - secondary-storage management
  - main-memory management
  - file-system access
  - protection
  - networking
*** Shell
- In Unix and Linux, the _shell_ is a program to read and interpret the control statements
- The shell is both an _interactive command language_ and a _scripting language_
- With shell scripts, user can control various actions
- There are two major types of shells
  - Bourne Shell
    - Bourne shell (sh)
    - Bourne-Again shell (bash) (Ubuntu)
    - Korn shell (ksh)
  - C Shell (csh) (BSD Unix)
**** Basic Commands
- Some basic commands
  - man
  - ls
  - cat
  - rm
  - mv
  - cp
  - mkdir
  - rmdir
  - cd
  - more
  - whereis
  - who
  - which
  - date
  - etc...
- System administration command
  - su
  - sudo
  - df
  - mount
  - df -t ext4
  - du
  - du -b
  - stat ch2
  - ulimit -c
  - free
  - vmstat
  - ulimit -a (for bash or pdksh)
  - ps -m
  - kill -l
  - top
  - uptime
  - w
  - pppstats (not installed) (ppp)
  - mailstat (not installed) (procmail)
*** Graphical User Interfaces (GUI)
- Windows: 95, 98, NT4, ME, 2000, Vista, XP, 7, 8, 8.1, 10
- Linux: KDE, Gnome, Mate, Cinnamon, Budgie, LXDE, Xfce,...
