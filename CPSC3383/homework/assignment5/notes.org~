#+TITLE: OS Homework 4
#+AUTHOR: Denver Ellis

* Code
** Header (slightly modified)
I slightly modified the given header to include a print function. This simple makes printing the data a lot easier. I stored it in the file =pcb.h= and disply it below.

#+BEGIN_SRC c
#include <stdio.h>
#include <stdlib.h>

struct saved_regs {
  double *reg1, *reg2, *reg32, *reg_pc;
};

struct pcb_type {
  int proc_id;
  int proc_priority;
  int proc_state;
  int proc_class;
  struct saved_regs *reg_pt;
};

struct process_list {
  struct pcb_type* pcb_pt;
  struct process_list* who_follows;
};

struct process_list *start = NULL;

int allocated_id = 1;
int allocated_prio = 1;
int allocated_class = 1;

struct saved_regs* alloc_saved_regs();
struct pcb_type* create_new_pcb();

void add_new_process(struct pcb_type* );
void print_process();
#+END_SRC

** Source Code
My source code implementation of the header is displayed below.

#+BEGIN_SRC c
#include "pcb.h"

int main() {
  for (int i = 0; i < 12; i++) {
    struct pcb_type* process = create_new_pcb();
    add_new_process(process);
  }

  int index = 12;
  while (start != NULL) {
    printf("index of process: %d \n", index);
    index--;
    print_process(start -> pcb_pt);
    start = start -> who_follows;
  }

}

void add_new_process(struct pcb_type *process) {
  struct process_list* processList = malloc(sizeof(struct process_list));
  processList -> pcb_pt = process;
  if (start == NULL) {
    start = processList;
    processList -> who_follows = NULL;
  } else {
    processList -> who_follows = start;
    start = processList;
  }
}

struct saved_regs* alloc_saved_regs() {
  struct saved_regs* reg = malloc(sizeof(struct saved_regs));

  reg->reg1   = malloc(1);
  reg->reg2   = malloc(1);
  reg->reg32  = malloc(1);
  reg->reg_pc = malloc(1);
  return reg;
}

struct pcb_type* create_new_pcb() {
  struct pcb_type* process = malloc(sizeof(struct pcb_type));
  process -> proc_class    = allocated_class;
  process -> proc_id       = allocated_id++;
  process -> proc_priority = allocated_prio;
  process -> reg_pt        = alloc_saved_regs();

  return process;
}

void print_process(struct pcb_type *process) {
  printf("address_pcb = %u \n", process -> reg_pt);
  printf("proc_id = %d \n", process -> proc_id);
  printf("proc_class = %d \n", process -> proc_class);
  printf("proc_priority = %d \n", process -> proc_priority);
  printf("proc_state = %d \n", process -> proc_state);

  printf("\n");
}
#+END_SRC
* Output
I compiled the code and ran it by the following. I stored my output in a text file to make reading the output easier and storable.

#+BEGIN_SRC bash
osc@ubuntu:~/final-src-osc10e/ch3/student$ gcc pcb.c
osc@ubuntu:~/final-src-osc10e/ch3/student$ ./a.out >> output.txt
#+END_SRC

The contents of output.txt are displayed below

#+BEGIN_SRC

#+END_SRC
index of process: 12 
address_pcb = 844811536 
proc_id = 12 
proc_class = 1 
proc_priority = 1 
proc_state = 0 

index of process: 11 
address_pcb = 844811296 
proc_id = 11 
proc_class = 1 
proc_priority = 1 
proc_state = 0 

index of process: 10 
address_pcb = 844811056 
proc_id = 10 
proc_class = 1 
proc_priority = 1 
proc_state = 0 

index of process: 9 
address_pcb = 844810816 
proc_id = 9 
proc_class = 1 
proc_priority = 1 
proc_state = 0 

index of process: 8 
address_pcb = 844810576 
proc_id = 8 
proc_class = 1 
proc_priority = 1 
proc_state = 0 

index of process: 7 
address_pcb = 844810336 
proc_id = 7 
proc_class = 1 
proc_priority = 1 
proc_state = 0 

index of process: 6 
address_pcb = 844810096 
proc_id = 6 
proc_class = 1 
proc_priority = 1 
proc_state = 0 

index of process: 5 
address_pcb = 844809856 
proc_id = 5 
proc_class = 1 
proc_priority = 1 
proc_state = 0 

index of process: 4 
address_pcb = 844809616 
proc_id = 4 
proc_class = 1 
proc_priority = 1 
proc_state = 0 

index of process: 3 
address_pcb = 844809376 
proc_id = 3 
proc_class = 1 
proc_priority = 1 
proc_state = 0 

index of process: 2 
address_pcb = 844809136 
proc_id = 2 
proc_class = 1 
proc_priority = 1 
proc_state = 0 

index of process: 1 
address_pcb = 844808896 
proc_id = 1 
proc_class = 1 
proc_priority = 1 
proc_state = 0 

