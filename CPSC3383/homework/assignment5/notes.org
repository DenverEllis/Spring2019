#+TITLE: Operating Systems HomeWork 5
#+AUTHOR: Denver Ellis

* Question 1
** Source
#+BEGIN_SRC c
#include <sys/types.h>
#include <stdio.h>
#include <unistd.h>

int main() {
  pid_t pid;
  pid = fork();

  if (pid < 0) {
    fprintf(stderr, "Fork Failed");
    return 1;
  } else if (pid == 0) {
    execlp("/usr/bin/man", "man", "fork", NULL);
  } else {
    wait(NULL);
    printf("Child Complete");
  }

  return 0;
}
#+END_SRC
** Screenshots
#+CAPTION: Compiling the code for question 1
#+NAME:   fig:h5p1
[[./imgs/h5p1.png]]

#+CAPTION: Running executable for question 1
#+NAME: fig:h5p2
[[./imgs/h5p2.png]]

* Question 2
** Source
#+BEGIN_SRC c
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>

int sum;
void *runner(void *param);

int main(int argc, char *argv[])
{
	pthread_t tid;
	pthread_attr_t attr;

	if (argc != 2) {
		fprintf(stderr,"usage: a.out <integer value>\n");
		return -1;
	}

	if (atoi(argv[1]) < 0) {
		fprintf(stderr,"Argument %d must be non-negative\n",atoi(argv[1]));
		return -1;
	}

	pthread_attr_init(&attr);
	pthread_create(&tid,&attr,runner,argv[1]);
	pthread_join(tid,NULL);

	printf("sum = %d\n",sum);
}


void *runner(void *param)
{

	int i, upper = atoi(param);
	sum = 0;

	if (upper > 0) {
		for (i = 1; i <= upper; i++)
			sum += i;
	}

	pthread_exit(0);
}
#+END_SRC
** Screenshots
#+CAPTION: Navigating to and compiling code for question 2
#+NAME: fig:h5p3
[[./imgs/h5p3.png]]

#+CAPTION: Running the executable for question 2
#+NAME: fig:h5p4
[[./imgs/h5p4.png]]
* Question 3
** Source
#+BEGIN_SRC c
#include <omp.h>
#include <stdio.h>

int main(int argc, char *argv[])
{
	#pragma omp parallel
	{
		printf("I am running a generic code segment with OpenMP\n");
	}

	return 0;
}
#+END_SRC
** Screenshot
#+CAPTION: Displaying, compiling, and executing the code for question 3
#+NAME: fig:h5p5
[[./imgs/h5p5.png]]
