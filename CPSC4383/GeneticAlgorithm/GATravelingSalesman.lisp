(defparameter *target* (cadr *args*))
(defparameter *pop-size* (parse-integer (car *args*)))

(defvar population (append '('())))
(defvar *mutation-rate* 0.001)
(defvar *crossover-rate* 0.7)

(defparameter *cities* (list
			'(A 6734 1453)
			'(B 2233 10)
			'(C 5530 1424)
			'(D 401 841)
			'(E 3082 1644)
			'(F 7608 4458)
			'(G 7573 3716)
			'(H 7265 1268)
			'(I 6898 1885)
			'(J 1112 2049)
			'(K 5468 2606)
			'(L 5989 2873)
			'(M 4706 2674)
			'(N 4612 2035)
			'(O 6347 2683)
			'(P 6107 669)
			'(Q 7611 5184)
			'(R 7462 3590)
			'(S 7732 4723)
			'(T 5900 3561)
			'(U 4483 3369)
			'(V 6101 1110)
			'(W 5199 2182)
			'(X 1633 2809)
			'(Y 4307 2322)
			'(Z 675 1006)
			'(AA 7555 4819)
			'(AB 7541 3981)
			'(AC 3177 756)
			'(AD 7352 4506)
			'(AE 7545 2801)
			'(AF 3245 3305)
			'(AG 6426 3173)
			'(AH 4608 1198)
			'(AI 23 2216)
			'(AJ 7248 3779)
			'(AK 7762 4595)
			'(AL 7392 2244)
			'(AM 3484 2829)
			'(AN 6271 2135)
			'(AO 4985 140)
			'(AP 1916 1569)
			'(AQ 7280 4899)
			'(AR 7509 3239)
			'(AS 10 2676)
			'(AT 6807 2993)
			'(AU 5185 3258)
			'(AV 3023 1942)))

(defun random-item (list)
  "Take a list and return one random item"
  (nth (random (length list)) list))

(defun generate-random-chromosome (list)
  "Make a chromosome from the list at random. To do this, copy list and shuffle"
  (loop for i from (length list) downto 2
        do (rotatef (elt list (random i))
                    (elt list (1- i))))
  list)

(defun distance (list)

(defun route-distance (list)


(format t (write-to-string (generate-random-chromosome (copy-list *cities*))))
(format t (write-to-string (generate-random-chromosome (copy-list *cities*))))
(format t (write-to-string *cities*))
