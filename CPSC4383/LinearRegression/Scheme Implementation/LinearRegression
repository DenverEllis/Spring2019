#lang racket
;-------------------------------------------------------------------------------
; Includes and required packages
;-------------------------------------------------------------------------------
(require 2htdp/batch-io) ;For parsing CSV File
(require plot)           ;For displaying data


;-------------------------------------------------------------------------------
; Function Definitions
;-------------------------------------------------------------------------------

;; sqr: Number -> Number
;; Squares the given number
(define (sqr num)
  (* num num))

;; dot-product: [List lst1] -> [List lst2] -> Number
;; Takes the dot product of two lists
(define (dot-product lst1 lst2)
  (if (or (null? lst1) (null? lst2)) 1
      (* (first lst1) (first lst2)))
  (dot-product (rest lst1) (rest lst2)))

;; matmul: [List mat1] -> [List mat2] -> [List]
;; Designed to opperate like numpy matmul.
(define (matmul mat1 mat2)
  (map
   (lambda (row)
    (apply map
     (lambda col
      (apply + (map * row col)))
     mat2))
   mat1))

;; sum: [List lst] -> Number
;; Sums the numbers in a list of numbers
(define (sum lst)
  (if (null? lst) 0
      (+ (car lst) (sum (cdr lst)))))

;; sub-lst: [List lst1 -> [List lst2] -> [List] -> [List]
;; Maps subtraction on two lists
(define (sub-lst lst1 lst2)
  (map - lst1 lst2))

;; length : [Listof Element] -> Number
;; Produces the number of elements in the list
(define (length lst)
  (cond
    [(empty? lst)  0]
    [(cons? lst)   (+ 1 (length (rest lst)))]))

;; compute-cost : [List X] -> [List y] -> [List theta] -> Number
;; The cost function to evaluate the linear regression.
(define (compute-cost X y theta)
  (sqr (- (flatten (matmul X theta)) y)))
  


;-------------------------------------------------------------------------------
; Code to be run
;-------------------------------------------------------------------------------

;;; Parse and display the data (proof of concept)
(define Data (read-csv-file "extdata1.csv"))
Data

;;; Population from Data
(define x (for/list ([i Data])
            (list (string->number (first i)))))

;;; Profit from Data
(define y (for/list ([i Data])
            (list (string->number (first (rest i))))))

;;; Plot data
(plot
    (points (for/list ([i (in-range (length Data))])
              (list (first (list-ref x i)) (first (list-ref y i))))
            #:color "blue")
    #:x-min 0
    #:x-max 30
    #:y-min 0
    #:y-max 30
    #:title "Profits Distribution"
    #:x-label "Population of City (in 10,000s)" #:y-label "Profit (in $10,000s)" )


;-------------------------------------------------------------------------------
; Debug Code (Use for insight into thought process)
;-------------------------------------------------------------------------------

;(sqr 5)
;(sqr 3.14)

;(dot-product x y)